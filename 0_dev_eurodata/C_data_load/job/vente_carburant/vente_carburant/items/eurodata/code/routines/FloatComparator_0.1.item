package routines;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class FloatComparator {

    /**
     * compareFloats: not return boolean value of float compare
     * 
     * 
     * {talendTypes} boolean
     * 
     * {Category} User Defined
     * 
     * {param} float1, float2, precision
     * 
     * {example} compareFloats(0.12, 0.13, 1)
     */
	public static boolean compareFloats(float float1, float float2, int precision) {
        // Calculate the multiplier for the specified precision
        float multiplier = (float) Math.pow(10, precision);

        // Round the floats to the specified precision
        float roundedFloat1 = Math.round(float1 * multiplier) / multiplier;
        float roundedFloat2 = Math.round(float2 * multiplier) / multiplier;

        // Compare the rounded floats
        return Float.compare(roundedFloat1, roundedFloat2) == 0;
    }
	
	public static boolean compareFloatsAsIntegers(float float1, float float2) {
        // Cast the floats to integers (truncate the decimal part)
        int int1 = (int) float1;
        int int2 = (int) float2;

        // Calculate the difference as integers
        int difference = int1 - int2;

        // Return true if the difference is zero
        return difference == 0;
    }
}
